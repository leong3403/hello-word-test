<<<<<<< HEAD
name: Deploy to AWS EC2 UAT

on:
  workflow_dispatch:
jobs:
  deploy:
    environment: UAT
=======
name: Build and Deploy to UAT and PRD
on:
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    name: Build Docker Image
>>>>>>> main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
<<<<<<< HEAD
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/myapp:UAT-latest

      # Step 5: Deploy to AWS EC2 via SSH
      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ vars.EC2_HOST }}
          EC2_USER: ${{ vars.EC2_USER }}
        run: |
          echo "EC2_HOST: $EC2_HOST"
          echo "EC2_USER: $EC2_USER"
          # Install SSH key
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # SSH into EC2 and deploy
          ssh -v -T -o StrictHostKeyChecking=no -i private_key.pem ${EC2_USER}@${EC2_HOST} << 'EOF'
            set -e  # Exit on error
            echo "Logging in to Docker Hub"
            sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }} || { echo "Docker login failed"; exit 1; }
            echo "Stopping existing container"
            sudo docker stop my-app-container || true
            sudo docker rm my-app-container || true
            echo "Pulling latest image"
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/myapp:UAT-latest || { echo "Docker pull failed"; exit 1; }
            echo "Running new container"
            sudo docker run -d --name my-app-container -p 80:3000 ${{ secrets.DOCKERHUB_USERNAME }}/myapp:UAT-latest || { echo "Docker run failed"; exit 1; }
            echo "Deployment complete"
          EOF
=======
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/myapp:${{ github.ref_name }}-latest

      - name: Upload Docker image tag
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-tag
          path: |
            .github/docker-image-tag.txt
          retention-days: 1
        run: |
          echo "${{ secrets.DOCKERHUB_USERNAME }}/myapp:${{ github.ref_name }}-latest" > .github/docker-image-tag.txt

  deploy-uat:
    name: Deploy to UAT
    needs: build
    if: github.ref == 'refs/heads/uat'
    uses: ./.github/workflows/deploy.yml
    with:
      target-env: UAT
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      EC2_HOST: ${{ vars.EC2_HOST }}
      EC2_USER: ${{ vars.EC2_USER }}
>>>>>>> main

  deploy-prd:
    name: Deploy to PRD
    needs: build
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/deploy.yml
    with:
      target-env: PRD
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      EC2_HOST: ${{ vars.EC2_HOST }}
      EC2_USER: ${{ vars.EC2_USER }}
