name: Deploy to AWS EC2

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - UAT
          - PRD
        default: 'UAT'

jobs:
  deploy:
    environment: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    env:
      EC2_HOST: ${{ vars.EC2_HOST }}
      EC2_USER: ${{ vars.EC2_USER }}

    steps:

    # Step 0: Log EC2_HOST and EC2_USER
      - name: Log deployment variables
        run: |
          echo "Deployment variables for ${{ github.event.inputs.environment }} environment:"
          echo "EC2_HOST: $EC2_HOST"
          echo "EC2_USER: $EC2_USER"
      
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 4: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/myapp:${{ github.event.inputs.environment }}-${{ github.sha }}

      # Step 5: Deploy to EC2 via SSH
      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # Install SSH key
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # SSH into EC2 and deploy
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${EC2_USER}@${EC2_HOST}
            echo "MYSERVER: $MYSERVER"
            echo "Stopping existing container"
            sudo docker stop my-app-container || { echo "Failed to stop container"; exit 1; }
            sudo docker rm my-app-container || { echo "Failed to remove container"; exit 1; }
            echo "Pulling latest image"
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/myapp:${{ github.event.inputs.environment }}-${{ github.sha }} || { echo "Docker pull failed"; exit 1; }
            echo "Running new container"
            sudo docker run -d --name my-app-container -p 80:3000 ${{ secrets.DOCKERHUB_USERNAME }}/myapp:${{ github.event.inputs.environment }}-${{ github.sha }} || { echo "Docker run failed"; exit 1; }
            echo "Cleaning up unused images"
            sudo docker image prune -f
            echo "Deployment complete"
          EOF

          # Clean up
          rm private_key.pem
